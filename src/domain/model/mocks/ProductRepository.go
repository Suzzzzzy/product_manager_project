// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "example.com/m/src/domain/model"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// DeleteProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) DeleteProduct(ctx context.Context, product *model.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProductByName provides a mock function with given fields: ctx, userId, keyword
func (_m *ProductRepository) FindProductByName(ctx context.Context, userId int, keyword string) ([]model.Product, error) {
	ret := _m.Called(ctx, userId, keyword)

	if len(ret) == 0 {
		panic("no return value specified for FindProductByName")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]model.Product, error)); ok {
		return rf(ctx, userId, keyword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []model.Product); ok {
		r0 = rf(ctx, userId, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userId, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProductId provides a mock function with given fields: ctx, productId
func (_m *ProductRepository) GetByProductId(ctx context.Context, productId int) (*model.Product, error) {
	ret := _m.Called(ctx, productId)

	if len(ret) == 0 {
		panic("no return value specified for GetByProductId")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Product, error)); ok {
		return rf(ctx, productId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Product); ok {
		r0 = rf(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductList provides a mock function with given fields: ctx, userId, page
func (_m *ProductRepository) GetProductList(ctx context.Context, userId int, page int) ([]model.Product, error) {
	ret := _m.Called(ctx, userId, page)

	if len(ret) == 0 {
		panic("no return value specified for GetProductList")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]model.Product, error)); ok {
		return rf(ctx, userId, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []model.Product); ok {
		r0 = rf(ctx, userId, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalProductCount provides a mock function with given fields: ctx, userId
func (_m *ProductRepository) GetTotalProductCount(ctx context.Context, userId int) (int, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalProductCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterProduct provides a mock function with given fields: ctx, tx, product
func (_m *ProductRepository) RegisterProduct(ctx context.Context, tx *gorm.DB, product *model.Product) (*model.Product, error) {
	ret := _m.Called(ctx, tx, product)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.Product) (*model.Product, error)); ok {
		return rf(ctx, tx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *model.Product) *model.Product); ok {
		r0 = rf(ctx, tx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *model.Product) error); ok {
		r1 = rf(ctx, tx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, product, updateInfo
func (_m *ProductRepository) UpdateProduct(ctx context.Context, product *model.Product, updateInfo map[string]interface{}) (*model.Product, error) {
	ret := _m.Called(ctx, product, updateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product, map[string]interface{}) (*model.Product, error)); ok {
		return rf(ctx, product, updateInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product, map[string]interface{}) *model.Product); ok {
		r0 = rf(ctx, product, updateInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Product, map[string]interface{}) error); ok {
		r1 = rf(ctx, product, updateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
